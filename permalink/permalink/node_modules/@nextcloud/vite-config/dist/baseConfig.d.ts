/**
 * SPDX-FileCopyrightText: 2023 Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
import type { CoreJSPluginOptions } from 'rollup-plugin-corejs';
import type { UserConfigExport, UserConfigFn, Rollup } from 'vite';
import { nodePolyfills } from 'vite-plugin-node-polyfills';
export type NodePolyfillsOptions = Parameters<typeof nodePolyfills>[0];
export interface BaseOptions {
    /** Strings to replace within your code */
    replace?: Record<string, string>;
    /**
     * Inject all styles inside the javascript bundle instead of emitting a .css file
     * @default false
     */
    inlineCSS?: boolean;
    /**
     * Whether to minify the output
     * @default isProduction Minify on production, do not on development
     */
    minify?: boolean;
    /**
     * Inject polyfills for node packages
     * @default false Disabled to reduce buildtime
     */
    nodePolyfills?: boolean | NodePolyfillsOptions;
    /**
     * Enable and adjust settings for core-js polyfills
     *
     * By default disabled as Nextcloud core already includes the `core-js/stable` polyfills globally
     */
    coreJS?: CoreJSPluginOptions;
    /**
     * Location of license summary file of third party dependencies
     * Pass `false` to disable generating a license file.
     *
     * @default 'dist/vendor.LICENSE.txt'
     */
    thirdPartyLicense?: false | string;
    /**
     * Customize the asset file names.
     * Similar to `output.assetFileNames` in rollup config,
     * but if returns undefined, then this config defaults is be used.
     *
     * @example Move CSS styles to `styles/style.css` instead of the default `css/[entrypoint-name].css`:
     *          (chunkInfo) => chunkInfo.name.endsWith('.css') ? 'styles/style.css' : undefined
     */
    assetFileNames?: (chunkInfo: Rollup.PreRenderedAsset) => string | undefined;
    /**
     * Vite config to override or extend the base config
     */
    config?: UserConfigExport;
}
/**
 * Create a basic configuration
 * @param options Options to use
 */
export declare function createBaseConfig(options?: BaseOptions): UserConfigFn;
