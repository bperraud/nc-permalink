/**
 * SPDX-FileCopyrightText: 2023 Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
import type { LibraryFormats, UserConfigFn } from 'vite';
import type { BaseOptions } from './baseConfig.js';
import { type PluginOptions as DTSOptions } from 'vite-plugin-dts';
import { type ExternalsOptions } from 'rollup-plugin-node-externals';
export interface LibraryOptions extends BaseOptions {
    /**
     * Whether to minify the output
     * @default false For libraries the code is not minified by default for better DX. Usually it is not needed: a library will be minified as a part of an app bundling.
     */
    minify?: boolean;
    /**
     * Options for the rollup node externals plugin
     *
     * By default all `dependencies` and `peerDependencies` are marked as external.
     * And node builtins prefix (`node:`) is stripped to make the library compatible with webpack and `node-polyfill-webpack-plugin`.
     *
     * Note: If you use dependencies `@nextcloud/vue/dist/Components/NcButton.js` and what them to be externalized too,
     * you need to set an include pattern: `{ include: [ /^@nextcloud\/vue/ ]}`
     */
    nodeExternalsOptions?: ExternalsOptions;
    /**
     * Options for the Vite DTS plugin
     *
     * This plugin allows to create .d.ts files for your library including the .vue files
     * Pass `false` to disable the plugin
     */
    DTSPluginOptions?: DTSOptions | false;
    /**
     * Formats you like your library to be built
     * @default ['es']
     */
    libraryFormats?: LibraryFormats[];
    /**
     * Filename of the css output when a single CSS file should be extracted (`inlineCSS: false`)
     * Note this only works with Vite 6.
     *
     * @default `style.css`
     */
    cssFileName?: string;
}
/**
 * Create a vite config for your nextcloud libraries
 *
 * @param entries Entry points of your app
 * @param options Options to use
 * @return {UserConfigFn} The vite config
 */
export declare const createLibConfig: (entries: {
    [entryAlias: string]: string;
}, options?: LibraryOptions) => UserConfigFn;
