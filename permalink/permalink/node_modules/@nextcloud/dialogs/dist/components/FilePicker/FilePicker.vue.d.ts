import { Node } from '@nextcloud/files';
import { IFilePickerButton, IFilePickerButtonFactory, IFilePickerFilter } from '../types.ts';
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToOption<{
    /** Buttons to be displayed */
    buttons: IFilePickerButton[] | IFilePickerButtonFactory;
    /** The name of file picker dialog (heading) */
    name: string;
    /**
     * Can directories be picked
     * @default false
     */
    allowPickDirectory?: boolean;
    /**
     * Is the navigation disabled
     */
    disabledNavigation?: boolean;
    /**
     * Where to mount the dialog
     * @default 'body'
     */
    container?: string;
    /**
     * Custom filter function used to filter pickable files
     */
    filterFn?: IFilePickerFilter;
    /**
     * List of allowed mime types
     * You can use placeholders for e.g. allowing all subtypes of images `['image/*']`.
     * Note that if unset all files are allowed, which is the same as passing `['*∕*']`
     * @default []
     */
    mimetypeFilter?: string[];
    /**
     * Is it allowed to pick multiple files
     * @default true
     */
    multiselect?: boolean;
    /**
     * The initial path of the file picker
     * @default '/'
     */
    path?: string;
}>, {
    allowPickDirectory: boolean;
    disabledNavigation: boolean;
    container: string;
    filterFn: undefined;
    mimetypeFilter: () => never[];
    multiselect: boolean;
    path: undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (v?: Node[] | undefined) => void;
}, string, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToOption<{
    /** Buttons to be displayed */
    buttons: IFilePickerButton[] | IFilePickerButtonFactory;
    /** The name of file picker dialog (heading) */
    name: string;
    /**
     * Can directories be picked
     * @default false
     */
    allowPickDirectory?: boolean;
    /**
     * Is the navigation disabled
     */
    disabledNavigation?: boolean;
    /**
     * Where to mount the dialog
     * @default 'body'
     */
    container?: string;
    /**
     * Custom filter function used to filter pickable files
     */
    filterFn?: IFilePickerFilter;
    /**
     * List of allowed mime types
     * You can use placeholders for e.g. allowing all subtypes of images `['image/*']`.
     * Note that if unset all files are allowed, which is the same as passing `['*∕*']`
     * @default []
     */
    mimetypeFilter?: string[];
    /**
     * Is it allowed to pick multiple files
     * @default true
     */
    multiselect?: boolean;
    /**
     * The initial path of the file picker
     * @default '/'
     */
    path?: string;
}>, {
    allowPickDirectory: boolean;
    disabledNavigation: boolean;
    container: string;
    filterFn: undefined;
    mimetypeFilter: () => never[];
    multiselect: boolean;
    path: undefined;
}>>>, {
    path: string;
    allowPickDirectory: boolean;
    multiselect: boolean;
    disabledNavigation: boolean;
    container: string;
    filterFn: IFilePickerFilter;
    mimetypeFilter: string[];
}>;
export default _default;
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_PrettifyLocal<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToOption<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
